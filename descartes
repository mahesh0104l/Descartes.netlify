def descartes_rule(coefficients, n):
    """Applies Descartes' Rule of Signs and calculates complex roots."""

    sign_changes = 0
    for i in range(len(coefficients) - 1):
        if (coefficients[i] > 0 and coefficients[i+1] < 0) or (coefficients[i] < 0 and coefficients[i+1] > 0):
            sign_changes += 1

    positive_roots = []
    temp_pos = sign_changes
    while temp_pos >= 0:
        positive_roots.append(temp_pos)
        temp_pos -= 2

    negative_coefficients = [c * (-1)**i for i, c in enumerate(coefficients)]
    negative_sign_changes = 0
    for i in range(len(negative_coefficients) - 1):
        if (negative_coefficients[i] > 0 and negative_coefficients[i+1] < 0) or (negative_coefficients[i] < 0 and negative_coefficients[i+1] > 0):
            negative_sign_changes += 1

    negative_roots = []
    temp_neg = negative_sign_changes
    while temp_neg >= 0:
        negative_roots.append(temp_neg)
        temp_neg -= 2

    complex_roots = []
    for pos in positive_roots:
        for neg in negative_roots:
            complex_roots.append(n - pos - neg)  # Simplified complex root calculation

    return positive_roots, negative_roots, complex_roots


# Get input from the user:
n = int(input("Enter the degree of the polynomial (n): "))
coefficients_str = input("Enter coefficients (separated by spaces, starting with constant term): ")
coefficients = [int(x) for x in coefficients_str.split()]

pos_roots, neg_roots, complex_roots = descartes_rule(coefficients, n)

print("Possible positive roots:", pos_roots)
print("Possible negative roots:", neg_roots)
print("Possible complex roots:", complex_roots)
